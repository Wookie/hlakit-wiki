[[[
===Introduction===

The std_assignment.h header file defines macros for 8 and 16 bit assignments that are common for all 6502 architectures.

[[[
===8-bit Assignments====

==assign==

dest = value\\
dest: memory location of 8 bit variable\\
value: memory location of 8 bit variable, 8 bit immediate value

{{{
#!c
inline assign(dest,value)
{
    lda value
    sta dest
}
}}}

==assign_x==

dest[x] = value\\
dest: memory location of 8 bit variable\\
value: 8 bit immediate value

{{{
#!c
inline assign_x(dest,value)
{
    lda value
    sta dest,x
}
}}}

==x_assign_x==

dest[x] = src[x]\\
dest: memory location of 8 bit variable\\
src: memory location of 8 bit variable

{{{
#!c
inline x_assign_x(dest,src)
{
    lda src,x
    sta dest,x
}
}}}

==x_assign_y==

dest[y] = src[x]\\
dest: memory location of 8 bit variable\\
src: memory location of 8 bit variable

{{{
#!c
inline x_assign_y(dest,src)
{
    lda src,x
    sta dest,y
}
}}}

==assign_y==

dest[y] = value\\
dest: memory location of 8 bit variable\\
value: 8 bit immediate value

{{{
#!c
inline assign_y(dest,value)
{
    lda value
    sta dest,y
}
}}}

==x_assign==

dest[x] = value\\
dest: memory location of 8 bit variable\\
src: memory location of 8 bit variable

{{{
#!c
inline x_assign(dest,src)
{
    lda src,x
    sta dest
}
}}}

==y_assign==

dest[y] = value\\
dest: memory location of 8 bit variable\\
src: memory location of 8 bit variable

{{{
#!c
inline y_assign(dest,src)
{
    lda src,y
    sta dest
}
}}}

==assign_ind==

[dest] = value\\
dest: memory location of 8 bit variable\\
value: memory location of 8 bit variable, 8 bit immediate value

{{{
#!c
inline assign_ind(dest,value)
{
    lda value
    sta [dest]
}
}}}

==assign_ind_y==

[dest][y] = value\\
dest: memory location of 8 bit variable
value: memory location of 8 bit variable, 8 bit immediate value

{{{
#!c
inline assign_ind_y(dest,value)
{
    lda value
    sta [dest],y
}
}}}

==ind_x_assign==

dest = [value][x]\\
dest: memory location of 8 bit variable\\
src: memory location of 8 bit variable

{{{
#!c
inline ind_x_assign(dest,src)
{
    lda [src,x]
    sta dest
}
}}}

==ind_y_assign==

dest = [value][y]\\
dest: memory location of 8 bit variable\\
src: memory location of 8 bit variable

{{{
#!c
inline ind_y_assign(dest,src)
{
    lda [src],y
    sta dest
}
}}}
]]]
[[[
===16-bit Assignments===

==assign_16_8==

dest = value\\
dest: Memory location of 16bit variable\\
value: Memory location of 8bit variable, 8bit immediate value

{{{
#!c
inline assign_16_8(dest,value)
{
    lda value
    sta dest+0
    lda #0
    sta dest+1
}
}}}

== assign_16_8_x==

dest[x] = value\\
dest: Memory location of 16bit variable\\
value: Memory location of 8bit variable, 8bit immediate value

{{{
#!c
inline assign_16_8_x(dest,value)
{
    lda value
    sta dest+0,x
    lda #0
    sta dest+1,x
}
}}}

==assign_16_8_y==

dest[y] = value\\
dest: Memory location of 16bit variable\\
value: Memory location of 8bit variable, 8bit immediate value

{{{
#!c
inline assign_16_8_y(dest,value)
{
    lda value
    sta dest+0,y
    lda #0
    sta dest+1,y
}
}}}

==assign_16_16==

dest = value\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline assign_16_16(dest,value)
{
    lda value+0
    sta dest+0
    lda value+1
    sta dest+1
}
}}}


==assign_16_16==

dest[x] = value\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline assign_16_16_x(dest,value)
{
    lda value+0
    sta dest+0,x
    lda value+1
    sta dest+1,x
}
}}}

==y_assign_16_16_x==

dest[x] = value[y]\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline y_assign_16_16_x(dest,value)
{
    lda value+0,y
    sta dest+0,x
    lda value+1,y
    sta dest+1,x
}
}}}


==assign_16_16_y==

dest[y] = value\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline assign_16_16_y(dest,value)
{
    lda value+0
    sta dest+0,y
    lda value+1
    sta dest+1,y
}
}}}


==ind_assign_16_16_x==

dest[y] = value;
dest: Memory location of 16bit variable
value: Memory location of 16bit variable

{{{
#!c
inline ind_assign_16_16_x(dest,value)
{
    ldy #0
    lda [value],y
    sta dest+0,x
    iny
    lda [value],y
    sta dest+1,x
}
}}}


==x_assign_16_16==

dest = value[x]\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline x_assign_16_16(dest,value)
{
    lda value+0,x
    sta dest +0
    lda value+1,x
    sta dest +1
}
}}}


==x_assign_16_16==

dest[x] = value[x]\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline x_assign_16_16_x(dest,value)
{
    lda value+0,x
    sta dest +0,x
    lda value+1,x
    sta dest +1,x
}
}}}


==y_ind_assign_16_16==

dest = *value[y]; (increments reg.y once)\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline y_ind_assign_16_16(dest,value)
{
    lda [value],y
    sta dest +0
    iny
    lda [value],y
    sta dest +1
}
}}}


==y_assign_16_16==

dest = value[y]\\
dest: Memory location of 16bit variable\\
value: Memory location of 16bit variable

{{{
#!c
inline y_assign_16_16(dest,value)
{
    lda value+0,y
    sta dest +0
    lda value+1,y
    sta dest +1
}
}}}


==assign_16==

dest = value\\
dest: Memory location of 16bit variable\\
value: 16bit immediate value

{{{
#!c
inline assign_16i(dest,value)
{
    lda #lo(value)
    sta dest+0
    lda #hi(value)
    sta dest+1
}
}}}


==assign_16i_x==

dest[x] = value\\
dest: Memory location of 16bit variable\\
value: 16bit immediate value

{{{
#!c
inline assign_16i_x(dest,value)
{
    lda #lo(value)
    sta dest+0,x
    lda #hi(value)
    sta dest+1,x
}
}}}


==assign_16_i_y==

dest[y] = value\\
dest: Memory location of 16bit variable\\
value: 16bit immediate value

{{{
#!c
inline assign_16i_y(dest,value)
{
    lda #lo(value)
    sta dest+0,y
    lda #hi(value)
    sta dest+1,y
}
}}}


==zero_16==

dest = 0\\
dest: Memory location of 16bit variable

{{{
#!c
inline zero_16(dest)
{
    lda #0
    sta dest+0
    sta dest+1
}
}}}


==zero_32==

dest = 0\\
dest: Memory location of 32bit variable

{{{
#!c
inline zero_32(dest)
{
    lda #0
    sta dest+0
    sta dest+1
    sta dest+2
    sta dest+3
}
}}}


==zero_16_x==

dest[x] = 0\\
dest: Memory location of 16bit variable

{{{
#!c
inline zero_16_x(dest)
{
    lda #0
    sta dest+0,x
    sta dest+1,x
}
}}}


==zero_16_y==

dest[y] = 0\\
dest: Memory location of 16bit variable

{{{
#!c
inline zero_16_y(dest)
{
    lda #0
    sta dest+0,y
    sta dest+1,y
}
}}}


==tyx==

transfers REG.Y to REG.X

{{{
#!c
inline tyx()
{
    tya
    tax
}
}}}


==txy==

transfers REG.X to REG.Y

{{{
#!c
inline txy()
{
    txa
    tay
}
}}}
]]]