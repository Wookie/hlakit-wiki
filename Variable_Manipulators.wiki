=Variable Manipulators=


The variable manipulator keywords are used at variable declaration and can change the use and properties of a variable.

===shared===

The shared keyword is used exclusively for warning messages. If you turn the warning level up to "2" or higher, it will warn you if a variable is accessed in both interrupts and functions, unless of course, it's declared as a shared variable. This is handy to prevent certain variables from being hijacked during an interrupt execution.

====Examples====
{{{
#!c
shared byte varForInterruptsAndFunctions
}}}

This works similar to the ##volatile## keyword in C.  It is used to explicitly call out variables that can change at any time due to an interrupt.

===':' (address specifier)===

The ':' operator on variable declarations allows you to manually specify the exact location of the variable. It is useful for cases such as registers.

====Examples====
{{{
#!c
BYTE PPU_CNT0      :$2000
BYTE SPR_DMA       :$4014
BYTE PPU_IO        :$2007
}}}

All address specifications are for the currently selected memory bank.  In general, any variables with initialized values that are given addresses in RAM will generate a warning and be ignored as it would require auto-generated code to initialize the RAM memory with the specified values before any other code executes.  Maybe this will happen in the future, but as of now, HLAKit doesn't support this.