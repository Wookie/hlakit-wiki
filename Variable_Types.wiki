=Variable Types=

HLAKit supports a fairly standard set of type names.  For complex data structures, there is a struct syntax for conglomerating basic types into structures.

It is important to note that the **dword** and the 32-bit **pointer** types are only present on CPU's that support them (e.g. 32-bit CPU's).  On 8/16-bit CPU's like the 6502, there is no **dword** and the **pointer** type is 16-bits.\\
\\

====The Types====
|=Type|=Bytes|=Range|=Description|=Notes|
|byte|1|0 to 255|8 bit integer||
|char|1|-128 to +127|8 bit character||
|bool|1|zero or nonzero|8 bit boolean value (true/false)||
|word|2|0 to 65535|16 bit integer||
|dword|4|0 to 4294967295|32 bit integer|32 bit CPU's only|
|pointer|2/4|0x0000 to 0xFFFF 8/16 bit\\ 0x00000000 to 0xFFFFFFFF 32 bit|16/32 bit address pointer integer|32 bit pointers on 32-bit CPU's only|
|struct|-|-|A collection of variables and data||

==Defining Types==

The HLAKit language only supports defining new types using the ##typedef## and ##struct## keywords.  Both ##typedef## and ##struct## keywords work exactly like they do in the C language.

===The ##typedef## Keyword===

The ##typedef## keyword is used to define a new type alias.

====The Syntax====
{{{
#!c
// standard type alias
typedef [shared] type alias

// array type alias
typdef [shared] type alias[size]

// struct type alias
typedef [shared] struct label
{
    // struct members
} alias
}}}

