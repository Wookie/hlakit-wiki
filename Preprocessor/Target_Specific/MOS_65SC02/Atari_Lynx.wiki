[[[
===Cart===

Preprocessor settings for specifying the block and bank size, as well as if the ROM has an EEPROM and what type it is.  Add a setting for specifying the initial value of AUDIOIN pin.

**#lnx.page_size_bank0**

The Lynx has two different registers by which you can read cart data.  If you read from $FCB2 then the CART0/ line on the cart bus will be used to strobe the read.  We call the memory accessed with the CART0/ strobe "bank 0".  This setting specifies how large each segment is.  Valid values are: 256, 512, 1K, and 2K.

====Example====
{{{
#!c
#lnx.page_size_bank0 2K
}}}

**#lnx.page_size_bank1**

This specifies how large each segment is in "bank 1" of the Lynx cart.  Valid values are: 256, 512, 1K, and 2K.

====Example====
{{{
#!c
#lnx.page_size_bank1 512
}}}

**#lnx.version**

This specifies which version of the .lnx file format to use.  Currently all known Lynx ROMs are stored in version 1 .lnx files.  There is a proposal for a version 2 that is specified here: [[http://www.classicgamedev.com/Lynx:LNXv2_File_Format|.lnx version 2]]

====Example====
{{{
#!c
#lnx.version 1
}}}

**#lnx.cart_name**

Every Lynx ROM has a name.  This is how you set it.  This is a string that can be up to 32 characters long.

====Example====
{{{
#!c
#lnx.cart_name "My Game"
}}}

**#lnx.manufacturer_name**

This is the name of the creator/manufacturer of the game (e.g. "Atari").  This is a string that can be up to 16 characters long.

====Example====
{{{
#!c
#lnx.manufacturer_name "My Game Studio"
}}}

**#lnx.rotation**

This specifies if the game is to be played in rotated mode.  Games can have "none", "left", and "right" rotation.

====Example====
{{{
#!c
#lnx.rotation "none"
}}}

**#lnx.off**

Normally, HLAKit will put a standard .lnx file header on any Lynx ROM binary image it creates.  This option turns off outputting a header.

====Example====
{{{
#!c
#lnx.off
}}}
]]]
[[[
===Encrypted Loader===

When the Atari Lynx boots, the system ROM code loads and decrypts a single 256 byte frame of RSA encoded executable into memory location 0x0200 and then jumps to it.  This initial executable is called the loader.  It is possible to have a loader larger than 256 bytes long by making the first frame of loader code adjust a few variables in the zero page and then jump back to the RSA load and decrypt function in the system ROM.

After every frame of data is loaded and decrypted, the system ROM code jumps to 0x0200.  That means you need to use self-modifying code at the beginning of the first frame to load multiple frames.  There is a more extensive description [[http://www.classicgamedev.com/Blog:Hacking_Classics/Lynx_Encryption|here]].

**#lynx.loader function**

The HLAKit Lynx Platform code supports designating a loader function that gets wrapped in some boilerplate loader code and then gets encrypted using the known Lynx RSA private key.

====Example====
{{{
#!c
#lynx.loader load_my_game

inline load_my_game() 
{
M1: bra 0       // self modifying bit, label for modification
    
    // code to load your game into RAM

    // modify the branch target at M1
}
}}}

The boilerplate loader code is a simple self-modifying bit of code that is able to load an arbitrary number of frames of encrypted data from the ROM.  This allows you to make your loader function as long and complex as you would like and the loader just works.

The trick to making the boilerplate work is to put a BRA . instruction as the first instruction in the first frame of executable so that it lands at 0x0200.  After the first frame is loaded and decrypted, the CPU will jump to 0x0200.  The first time it does this, the BRA will just branch to the next instruction.  The next instructions will decrement a frame counter and modify the destination pointer for the next frame of encrypted data to be loaded into and then jump back into the RSA load and decrypt ROM function.

By using the #lynx.loader directive, HLAKit will compile your loader function into a binary executable and measure how large it is.  It will then figure out how many frames of encrypted data are needed to store the loader and it will hard code the frame counter in the boilerplate loader code so that the entire loader function is loaded and decrypted into memory.  When the last frame of encrypted data is loaded and decrypted, the boilerplate code will jump to the loader function.

There is a caveat here.  I wouldn't do to much in your loader function other than load in your main executable and jump to it.  To do anything else like show a graphic and/or play music you will likely call library functions to do that.  Since the entire loader has to be encrypted, the library functions have to be included in the binary image that gets encrypted, thus duplicating the library function you use in the resulting binary.

My general strategy is to write a loader function that is the bare minimum needed to load in the main executable so that the encrypted loaded binary is as small and fast as possible.
]]]
[[[
===Thoughts on Lynx Loader Design===

If you want your main executable function for your game to be located at a specific location in RAM, such as in the zero page or at $0200, you will need to use a two-stage loader processes because of the encryption system and the way it works.

As described above, the Lynx ROM code is hard coded to decrypt the first block of data to $0200 and then jump to it.  If you want your game's main loop function to be located at $0200 you have two options:
# To designate your game's main function as the loader function using the #lynx.loader preprocessor directive.
# To use a two-stage loader so that the first stage gets you past the encryption and loads the second stage in zero page or way up in RAM and can then load your game's main function into to $0200 or your desired location before executing it.
]]]
[[[
===ROM===

Unlike pretty much every other 6502 based computer, the Atari Lynx does not access its cart ROM directly.  Instead it loads data from the cart ROM into RAM as needed through a couple of I/O registers.

That creates an interesting situation for compilers since the compiled code and data will be stored in a ROM image with it's own address space and be loaded into RAM and executed there.  This means we need to have overlapping addressing schemes, one for execution and one for storage.

So when writing games for the Atari Lynx, we use the regular #ram.* preprocessor directives to set the execution addressing details so that the compiler can calculate addresses and relative jumps correctly.

As for the Lynx ROM cart addressing, this is where it gets interesting.  Lynx ROMs can have up to 2 banks, with each bank being divided into up to 256 segments, each containing between 512 and 2048 bytes of data.  The terminology then is that we have a bank number (0 or 1), a segment address (0-255), and a counter address (0-2047, depends on banksize).  The reason we the counter address is called "counter" address is because the Lynx has an 11-bit counter chip that automatically increments after each write/read to/from the ROM cart.

To reflect that in HLAKit, the meanings of the #rom.* preprocessor defines have changed a bit.

**#rom.org segment address[, counter address][, maxsize]**

This sets the Lynx ROM image segment address, counter address, and maxsize for the following data.  Note that the parameters are different than the original #rom.org defined in [[Preprocessor ROM and RAM Banks and Blocks|ROM preprocessor declarations]]. This allows compiled code and/or data to be placed anywhere in the ROM image.  The maxsize value is used to check assumptions about the size of the compiled code and data, it does not affect the maxsize of the bank.

**#rom.end**

This keeps it's original meaning as defined in [[Preprocessor ROM and RAM Banks and Blocks|ROM preprocessor declarations]].  It ends a previously started ROM data block.

**#rom.banksize size**

The Atari Lynx only has three valid bank sizes: 128K, 256K, and 512K.  If you do not specify a banksize, the default value is 512K.  You will receive a warning if there are multiple #rom.banksize declarations for the same bank.  The banksize affects the valid range of the counter address because the number of segments is fixed at 256, the smaller ROMs like the 128K ROM only uses 9-bits of the counter chip.  So if you declare your ROM to only have a banksize of 128K, the HLAKit compiler will automatically check for and limit each segment to only 512 bytes in size.

**#rom.bank banknumber[, size]**

This specifies which bank is currently being written to.  The Atari Lynx only has two possible banks: 0 and 1.  You can optionally set the size of the bank by specifying the size parameter.  It behaves exactly like the #rom.banksize described above.
]]]