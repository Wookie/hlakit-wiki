[[[
===Introduction===
[[http://bitbucket.org/wookie/hlakit|HLAKit]] is a new compiler for a language based on [[http://bitbucket.org/wookie/neshla|NESHLA]] (NES High Level Assembler) by Brian Provinciano.  The [[http://bitbucket.org/wookie/neshla|NESHLA]] compiler is targeted only at the NES system and has lots of NES-specific features in both the language and the standard library.  HLAKit aims to be a compiler for a more general HLA (high level assembly) language targeted at as many old video game consoles and computers as possible.

The [[http://bitbucket.org/wookie/hlakit|HLAKit]] compiler is implemented in Python and uses the pyparsing module to handle all of the language parsing.  The goal is to structure the compiler in such a way that all platform/CPU specific pieces of the language are modular and swappable.  Currently, the list of platform and/or CPU specific parts includes: assembly opcodes, register names, if/while test values, and preprocessor directives.  These will be explained in more detail later on.

Why do this?  An HLA language gives a nice balance between structured programming and assembly language.  It allows you to program using functions, structs, named variables, if-else blocks and loops while still preserving precise, cycle-counted control over the machine.  Unlike C, the HLA understood by the [[http://bitbucket.org/wookie/hlakit|HLAKit]] compiler uses assembly for the body of functions.  When you are coding for old, 8-bit and 16-bit computers that have precise timing requirements, assembly language is the only way to be sure you are getting the most out of the machine.
]]]
