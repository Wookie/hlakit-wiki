[[[
===Variable Types===

HLAKit supports a fairly standard set of type names.  For complex data structures, there is a struct syntax for conglomerating basic types into structures.

It is important to note that the **dword** and the 32-bit **pointer** types are only present on CPU's that support them (e.g. 32-bit CPU's).  On 8/16-bit CPU's like the 6502, there is no **dword** and the **pointer** type is 16-bits.
]]]
[[[
===The Types===
|=Type|=Bytes|=Range|=Description|=Notes|
|byte|1|0 to 255|8 bit integer||
|char|1|-128 to +127|8 bit character||
|bool|1|zero or nonzero|8 bit boolean value (true/false)||
|word|2|0 to 65535|16 bit integer||
|dword|4|0 to 4294967295|32 bit integer|32 bit CPU's only|
|pointer|2/4|0x0000 to 0xFFFF 8/16 bit\\ 0x00000000 to 0xFFFFFFFF 32 bit|16/32 bit address pointer integer|32 bit pointers on 32-bit CPU's only|
|struct|-|-|A collection of variables and data||
]]]
[[[
===Defining Types===

The HLAKit language only supports defining new types using the ##typedef## and ##struct## keywords.  Both ##typedef## and ##struct## keywords work exactly like they do in the C language.
]]]
[[[
===The ##typedef## Keyword===

The ##typedef## keyword is used to define a new type alias.

====The Syntax====
{{{
#!c
// standard type alias
typedef type alias

// array type alias
typedef type alias[size]

// struct type alias
typedef struct label
{
    // struct members
} alias

// array of structs type alias
typedef struct label
{
    // struct members
} alias[size]
}}}

This is exactly like the way the C language creates alias with the ##typedef## keyword.  Note that the size in the array typedef expressions is optional.  However, if no size is given, all instances of the aliased type must have initializers so that the compiler can correctly calculate the size of each variable instance.

====Examples====
{{{
#!c
// standard type aliases
typedef byte INT
INT intVar  // this is a byte

typdef pointer LIST
LIST pInterestList // pointer variable

// array type alias
typedef byte buffer[32]
buffer myBuf // array of 32 bytes

// struct type alias
typedef struct player_
{
    byte x, y
    byte health
    byte experience
    pointer inventory
} player
player me // struct player variable
}}}

Normally, if you do not typedef a ##struct## type you have to declare variables using the full ##struct foo## type.  In the example above, the type ##struct player_## has been aliased as ##player## using ##typedef##.  From that point on, you can declare new variables using just ##player## instead of ##struct player_##.
]]]
[[[
===The ##struct##\\Keyword===

The ##struct## keyword is used to create new types that are structured containers of named members.  Structs can contain any number of members of any valid type, including other structs.

====The Syntax====
{{{
#!c
struct label
{
    type label[, label, ...]
}
}}}

Note that the type of the struct member can be any basic type or any already declared struct type.

====Examples====
{{{
#!c
// standard struct declare
struct time
{
    byte ticks
    byte seconds
    byte minutes
    byte hours
}

// struct declared with member list
struct scrollTo
{
    byte flags
    word x, y
}

// struct declared with member struct
struct player
{
    byte sprite
    byte joypad
    struct move
    {
        byte x, y
        byte amount
    } move
    byte anArray[10]
}

// a struct with two previously defined structs as members
struct scrollEvent
{
    struct scrollTo to
    struct time when
}
}}}

Struct members can be arrays but they must have a size specified.

When referencing struct members in your code you use dotted notation.

====Examples====
{{{
#!c
struct scrollEvent evt

// load the ticks into the X reg
ldx evt.when.ticks

struct player p

// store X reg into player array at index 2
stx p.anArray,2
}}}
]]]
[[[
===Variable Declarations===

The HLAKit language supports named variables to make coding easier.  Variables are defined as instances of a specific type and can be assigned to a specific memory location and an initial value.

====The Syntax====
{{{
#!c
// standard variables
[shared] type label [: address ] [= value]

// variable array with address and assignment
[shared] type label[size] [: address] [= { values }]

// variable array with implied size and assignment
[shared] type label[] = 
{ 
    // values 
}
}}}

Notice that when declaring an array variable that the size is optional if the variable declaration also includes an initial assignment.  The size can be calculated at compile time from the initial assignment.

Array and struct variables are initialized with an assignment surrounded by braces.

====Examples====
{{{
#!c
byte counter         // simple variable declaration
byte amount = 123    // variable with initial value
pointer nametablePtr // pointer for the name table

// define the struct time type
struct time 
{
    byte ticks
    byte seconds
    byte minutes
    byte hours
}

// a struct time variable with initialization
struct time t = 
{
    0,   // 0 ticks
    10,  // 10 seconds
    1,   // 1 minute
    3,   // 3 hours
}

typedef struct move_
{
    byte x, y
} move

// variable with type alias to struct move_
move m = { 10, 10 }
}}}

Notice how struct variables are initialized with values surrounded by braces just like in C.
]]]
[[[
===Variable Arrays===

Variable arrays can be defined with a specific size value as a place holder, or have their elements explicitly defined. If the elements are explicitly defined, the size does not need to be specified.

====Examples====
{{{
#!c
// a time struct variable with initialization
struct time t = 
{
    0,   // 0 ticks
    10,  // 10 seconds
    1,   // 1 minute
    3,   // 3 hours
}

// array of time structs with explicit size
struct time history[10]

// shared array of time structs with address and implied size
shared struct time stamps[] : 0x0200 =
{
    { 0, 0, 0, 1 },
    { 1, 1, 2, 1 },
    { 0, 10, 1, 3 }
}
}}}

In the above example, the variable named ##stamps## is an array of time structs that will be located at 0x0200 in the current bank and will be initialized as an array with three time struct values.  The size of the array is does not have to be supplied because it can be calculated by the compiler.
]]]
[[[
===Variable\\Initialization===

Variable array initializations can contain labels that reference specific locations in the array.  This is useful for hand tailoring access to arrays.

====Example====
{{{
#!c
// ROM variable array declaration with defined elements
byte player_tiles[] = 
{
    player_tiles_walk:
    spr00: $01,$02, $03,$04, $05,$06,
    spr01: $07,$08, $43,$44, $41,$42,
    spr02: $11,$32, $54,$11, $42,$32
}
}}}

By using one of the labels defined in the above example, you get direct access to the array member without having to do an indirect, indexed lookup.
]]]
[[[
===Variable Manipulators===

The variable manipulator keywords are used at variable declaration and can change the use and properties of a variable.
]]]
[[[
===The ##shared## Keyword===

The shared keyword is used exclusively for warning messages. If you turn the warning level up to "2" or higher, it will warn you if a variable is accessed in both interrupts and functions, unless of course, it's declared as a shared variable. This is handy to prevent certain variables from being hijacked during an interrupt execution.

====Examples====
{{{
#!c
shared byte varForInterruptsAndFunctions
}}}

This works similar to the ##volatile## keyword in C.  It is used to explicitly call out variables that can change at any time due to an interrupt.
]]]
[[[
===The ':' (address specifier) Keyword===

The ':' operator on variable declarations allows you to manually specify the exact location of the variable. It is useful for cases such as registers.

====Examples====
{{{
#!c
BYTE PPU_CNT0      :$2000
BYTE SPR_DMA       :$4014
BYTE PPU_IO        :$2007
}}}

All address specifications are for the currently selected memory bank.  In general, any variables with initialized values that are given addresses in RAM will generate a warning and be ignored as it would require auto-generated code to initialize the RAM memory with the specified values before any other code executes.  Maybe this will happen in the future, but as of now, HLAKit doesn't support this.
]]]